class Solution {
/*
45.跳跃游戏II
给定一个长度为 n 的 0 索引整数数组 nums。初始位置为 nums[0]。
每个元素 nums[i] 表示从索引 i 向前跳转的最大长度。换句话说，如果你在 nums[i] 处，你可以跳转到任意 nums[i + j] 处:
0 <= j <= nums[i] 
i + j < n
返回到达 nums[n - 1] 的最小跳跃次数。生成的测试用例可以到达 nums[n - 1]。
*/
  public int jump(int[] nums) {
    int end = 0;
    int steps = 0;
    int length = nums.length;
    int maxPosition = 0;
    for(int i = 0; i < length - 1; i++) {
      maxPosition = Math.max(maxPosition, i + nums[i]);
      if(i == end) {
        end = maxPosition;
        steps++;
      }
    }
    return steps;
  }
/*
47.全排列II
给定一个可包含重复数字的序列 nums ，按任意顺序 返回所有不重复的全排列。
*/
  public List<List<Integer>> permuteUnique(int[] nums) {
    List<List<Integer>> res = new ArrayList<>();
    int len = nums.length;
    if(len == 0) {
      return res;
    }
    Arrays.sort(nums);
    boolean[] used = new boolean[len];
    Deque<Integer> path = new ArrayDeque<>(len);
    dfs(nums, 0, len, used, path, res);
    return res;
  }
  private void dfs(int[] nums, int begin, int len, boolean[] used, Deque<Integer> path, List<List<Integer>> res) {
    if(begin == len) {
      res.add(new ArrayList(path));
      return;
    }
    for(int i = 0; i < len; i++) {
      if(used[i]) {
        continue;
      }
      if(i > 0 && nums[i] == nums[i - 1] && used[i - 1]) {
        continue;
      }
      path.addLast(nums[i]);
      used[i] = true;
      dfs(nums, begin + 1, len, used, path, res);
      used[i] = false;
      path.removeLast();
    }
  }
/*
48.旋转图像
给定一个 n × n 的二维矩阵 matrix 表示一个图像。请你将图像顺时针旋转 90 度。
你必须在 原地 旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要 使用另一个矩阵来旋转图像。
*/
  public void rotate(int[][] matrix) {
    int n = matrix.length;
    int[][] matrix_new = new int[n][n];
    for(int i = 0; i < n; i++) {
      for(int j = 0; j < n; j++) {
        matrix_new[j][n - i - 1] = matrix[i][j];
      }
    }
    for(int i = 0; i < n; i++) {
      for(int j = 0; j < n; j++) {
        matrix[i][j] = matrix_new[i][j];
      }
    }
  }
}
